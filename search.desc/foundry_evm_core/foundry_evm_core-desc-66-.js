searchState.loadedDescShard("foundry_evm_core", 66, "Tracks all contracts by their code hash.\nA wrapper around <code>Backend</code> that is clone-on-write used for …\nCreates a snapshot of the currently active database\nCreates a new fork but does <em>not</em> select it\nCreates a new fork but does <em>not</em> select it\nCreates and also selects a new fork\nCreates and also selects a new fork\ntracks all the created forks Contains the index of the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns the underlying storage\nReturns the current database implementation as a <code>&amp;dyn</code> …\nThe underlying database ([DatabaseRef]) that is used to …\nThe underlying database ([DatabaseRef]) that is used to …\nReturns the current database implementation as a <code>&amp;mut dyn</code> …\nDeletes the snapshot with the given <code>id</code>\nDeletes all snapshots.\nHandling multiple accounts/new contracts in a multifork …\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nEnsures that <code>account</code> is allowed to execute cheatcodes\nSame as <code>Self::ensure_cheatcode_access()</code> but only enforces …\nEnsures that an appropriate fork exists\nEnsures that a corresponding <code>ForkId</code> exists for the given …\nContains the env at the time of the snapshot\nReturns the <code>EnvWithHandlerCfg</code> with the current <code>spec_id</code> set.\nExtends the persistent accounts with the accounts the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nFlushes the DB to disk if caching is enabled\nThe journaled_state to use to initialize new forks with\nThe access point for managing forks\nHolds all created fork databases\nReturns an iterator over Forks\nReturns a mutable iterator over all Forks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the block numbers required for replaying a …\nReturns the underlying fork mapped to the index\nReturns the underlying fork corresponding to the id\nReturns the underlying fork corresponding to the id\nReturns the underlying fork mapped to the index\nReturns the full block for the given block identifier\nReturns the transaction for the hash\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>true</code> if the given account is allowed to execute …\nFailures occurred in snapshots are tracked when the …\nTracks whether there was a failure in a snapshot that was …\nall the hosts used to connect to\nIn-memory database.\nInitializes settings we need to keep track of.\nholds additional Backend data\nInserts a value on an account’s storage without …\nInserts a <em>new</em> <code>ForkDB</code> and issues a new local fork identifier\nExecutes the configured test call of the <code>env</code> without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns true if the <code>id</code> is currently active\nReturns true if the account is a contract\nReturns true of the address is a contract\nReturns true if no forks are issued\nReturns true if the address is a precompile\nWhether the database is currently in forked mode.\nReturns <code>true</code> if the <code>Backend</code> is currently in forking mode\nKeeps track of whether the backed is already initialized\nReturns true if the given account is currently marked as …\nWhether the error is potentially caused by the user …\nThis tracks numeric fork ids and the <code>ForkId</code> used by the …\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nThe journaled_state state at a specific point\nStores the <code>ForkId</code> of the fork the <code>Backend</code> launched with …\nReturns the number of issued ids\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nLoads the account allocs from the given <code>allocs</code> map into …\nLoads the account allocs from the given <code>allocs</code> map into …\nAll logs that were committed via [DatabaseCommit::commit].\nAll logs that were committed via [DatabaseCommit::commit].\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns the memory db used if not in forking mode\nClones the data of the given <code>accounts</code> from the <code>active</code> …\nClones the account data from the <code>active</code> db into the <code>ForkDB</code>\nClones the account data from the <code>active_journaled_state</code>  …\nSince each <code>Fork</code> tracks logs separately, we need to merge …\nReturns the Env related metadata\nReturns a new <code>SharedBackend</code> and the <code>BackendHandler</code>\nCreates a new instance of the BlockchainDb.\nCreates a new instance\nCreates a new instance of <code>Backend</code>\nReturns a new, empty, <code>JournaledState</code> with set precompiles\nCreates a new instance of the BlockchainDb and skips check …\nCreates a new instance of <code>Backend</code> with fork added to the …\nTracks numeric identifiers for forks\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nAll accounts that should be kept persistent when switching …\nCleans up already loaded accounts that would be …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nRevokes persistent status from the given account.\nRemoves persistent status from all given accounts.\nCompletely replace an account’s storage without …\nReplays all the transactions at the forks current block …\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReverts the snapshot if it exists\nReverts the entire fork database\nRevokes cheatcode access for the given account\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nUpdates the fork to given block number.\nThis is effectively the same as <code>Self::create_select_fork()</code> …\nUpdates the fork to given transaction hash\nSelects the fork’s state\nSelect an existing fork by id. When switching forks we …\nSet the blockhash for a given block number.\nSets the caller address\nSets the initial journaled state to use when initializing …\nUpdates the pinned block to fetch data from\nSets the snapshot failure flag.\nSets the current spec id\nSets the address of the <code>DSTest</code> contract that is being …\nCreates a new snapshot at the current point of execution.\nReturns all snapshots created in this backend\nContains snapshots made at a certain point\nCreates a new Backend with a spawned multi fork thread.\n<em>Spawns</em> a new <code>BackendHandler</code> on a <code>tokio::task</code> that listens …\nSame as <code>Self::spawn_backend</code> but spawns the <code>BackendHandler</code> …\nThe SpecId of the current backend.\nThe configured spec id\nReturns the map that holds the storage related info\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nRemoves the fork\nFetches the given transaction for the fork and executes …\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nThis updates the currently used env with the fork’s …\nUpdates the env’s block with the block’s data\nWhen creating or switching forks, we update the …\nMerges the state of all <code>accounts</code> from the currently active …\nUpdates the fork and the local mapping and returns the new …\nHelper method which updates data in the state with the …\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nA wrapper around <code>Backend</code> that ensures only …\nEnables the styling <code>Attribute</code> <code>value</code>.\nThe underlying <code>Backend</code>.\nReturns a mutable instance of the Backend.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns whether there was a snapshot failure in the …\nReturns a mutable instance of the Backend if it is …\nExecutes the configured transaction of the <code>env</code> without …\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nKeeps track of whether the backed is already initialized\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nCreates a new <code>CowBackend</code> with the given <code>Backend</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nThe SpecId of the current backend.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nThe <code>contract</code> does not exist on the <code>active</code> fork but exist …\nRepresents possible diagnostic cases on revert\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nConverts the diagnostic to a readable error message\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nErrors that can happen when working with <code>revm::Database</code>\nErrors that can happen when working with <code>revm::Database</code>\nResult alias with <code>DatabaseError</code> as error\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nCreate a new error with a message\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nCreate a new error with a message\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nAn empty database that always returns default values when …\nType alias for an in-memory database.\nIn-memory <code>Database</code> for Anvil.\nAccount info where None means it is not existing. Not …\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nAll cached block hashes from the [DatabaseRef].\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nTracks all contracts by their code hash.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nThe underlying database ([DatabaseRef]) that is used to …\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nAll logs that were committed via [DatabaseCommit::commit].\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nRepresents a snapshot taken during evm execution\nKeep the snapshot after reverting\nRemove the snapshot after reverting\nWhat to do when reverting a snapshot\nA minimal abstraction of a state at a certain point in time\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nContains the env at the time of the snapshot\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>true</code> if the action is to keep the snapshot\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nThe journaled_state state at a specific point\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nCalled when this snapshot is reverted.\nTakes a new snapshot\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nStores the caller address to be used as <em>sender</em> account for:\nThe cheatcode handler address.\nThe contract hash at <code>CHEATCODE_ADDRESS</code>.\nThe default CREATE2 deployer.\nThe initcode of the default CREATE2 deployer.\nThe address that deploys the default CREATE2 deployer …\nThe runtime code of the default CREATE2 deployer.\nThe Hardhat console address.\nMagic return value returned by the <code>assume</code> cheatcode.\nMagic return value returned by the <code>skip</code> cheatcode.\nThe default test contract address.\nDecodes revert data.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nTries to decode an error message from the given revert …\nDecode a single log.\nDecode a set of logs, only returning logs from DSTest …\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nThe custom errors to use for decoding.\nExtends the decoder with the given ABI’s custom errors.\nExtends the decoder with the given ABI’s custom errors.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nTries to decode an error message from the given revert …\nCreates a new, empty revert decoder.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nAdds a custom error to use for decoding.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nSets the ABI to use for error decoding.\nSets the ABI to use for error decoding, if it is present.\nSets the ABIs to use for error decoding.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nRepresents a <em>fork</em> of a remote chain whose data is …\nThe <em>unique</em> identifier for a specific fork, this could be …\nThe Sender half of multi fork pair. Can send requests to …\nThe type that manages connections in the background.\nEnsures that all rpc resources get flushed properly.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nA revm database that forks off a remote client\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nWhether to enable rpc storage caching for this fork\nThe env to create this fork, main purpose is to provide …\nInitializes a REVM block environment based on a forked …\nAll env settings as configured by the user\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nOptional periodic interval to flush rpc cache.\nAll <em>unique</em> forkids mapped to their corresponding backend.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nChannel to send <code>Request</code>s to the handler.\nAll active handlers.\nIncoming requests from the <code>MultiFork</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nSupport for running multiple fork backends.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nThe URL to a node for fetching remote state\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nRepresents a snapshot of the database\na revm::Database that’s forked off another client\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nresponsible for fetching missing data\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nCached Database layer, ensures that changes are not …\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nContains all the data already fetched\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nFlushes the cache to disk if configured\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns the database that holds the remote state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nCreates a new instance of this DB\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.\nReset the fork to a fresh forked state, and optionally …\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Resetting</code>.\nRemoves the snapshot from the tracked snapshot and sets it …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.\nholds the snapshot state of a blockchain\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.\nInitializes a REVM block environment based on a forked …\nContains the future that will establish a new fork.\nCreates a new ForkBackend.\nTracks the created Fork\nThe <em>unique</em> identifier for a specific fork, this could be …\nReturns the environment of the fork.\nReturns the Fork backend for the <code>ForkId</code> if it exists.\nReturns the Fork Url for the <code>ForkId</code> if it exists.\nThe Sender half of multi fork pair. Can send requests to …\nThe type that manages connections in the background.\nRequest that’s send to the handler.\nAdjusts the block that’s being forked, by creating a new …\nShutdowns the entire <code>MultiForkHandler</code>, see …\nA type that’s used to signaling the <code>MultiForkHandler</code> …\nUpdates the block number and timestamp of the fork.\nEnsures that all rpc resources get flushed properly.\nReturns the identifier of the fork.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nCopy of the sender.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.\nCreates a new fork.\nReturns a fork backend.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns the list of additional senders of a matching task …\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.\nOptional periodic interval to flush rpc cache.\nAll <em>unique</em> forkids mapped to their corresponding backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>Env</code> of the given fork, if any.\nReturns the corresponding fork if it exists.\nReturns the corresponding fork url if it exists.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.\nChannel to send <code>Request</code>s to the handler.\nAll active handlers.\nIncrement senders and return unique identifier of the fork.\nIncoming requests from the <code>MultiFork</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.\nReturns the identifier for a Fork from a URL and block …\nHow many consumers there are, since a <code>SharedBacked</code> can be …\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.\nReturns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.")